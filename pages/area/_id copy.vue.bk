<template lang="pug">
    div.container
        div.flex.flex--center
            h1.ttl {{ prefName }}の派遣事情
            div(v-if="isLogin")
                button.button.button--yellow.button--round(@click="toggleModal") 会議を開く
        div.filter.flex.flex--wrap
            div.filter__item.isActive(@click="setTargetArea('全域', $event)") {{ prefName }}全域
            div.filter__item(v-for="(data, index) in subAreas" :key="index" @click="setTargetArea(data, $event)") {{ data }}
        
        transition-group.flex.flex--space-between.flex--wrap(tag="div" appear)
            div.talk.visible(v-for="(talk, index) in talks" :key="index" :class="{invisible: isTargetArea(talk.subArea)}")
                talk(:talk="talk")
    
        transition-group
            div.modal.modal--full(v-if="isOpenModal" key="div" @click.self="isOpenModal=!isOpenModal")
                div.modal__inner
                    h3.center 会議室を作成
                    div.form
                        div.formGroup
                            label(for="title") タイトル
                                span.red *
                            input#title(type="text" name="title" v-model="inputTitle" placeholder="ex. 〇〇周辺のおすすめの職場は？")
                        div.formGroup
                            label(for="description") 説明文
                            textarea#description(name="description" cols="30" rows="5" v-model="inputDescription")
                        div.formGroup
                            label(for="subArea") 地域
                                span.red *
                            select#subArea(v-model="selectedSubArea" name="subArea")
                                option(value="全域") {{ $store.state.area.areaName }}全域
                                option(v-for="(data, index) in subAreaData" :key="index") {{ data.m_name }}
                    div.formGroup.formGroup--buttons.center
                        button.button.button--round(@click="isOpenModal=!isOpenModal") キャンセル
                        button.button.button--yellow.button--round(@click="createTalk") 会議を開く
</template>

<script>
import firebase from '@/plugins/firebase.js'
import 'firebase/firestore'
import { mapActions, mapState, mapGetters } from 'vuex'
import axios from 'axios'
import Login from '~/components/Login.vue'
import Talk from '~/components/Talk.vue'
import Meta from '~/assets/mixins/meta'

export default {
    mixins: [Meta],
    fetch ({store}) {
        store.commit('resetModal')
        store.commit('resetModalProfile')
    },
    components: {
        Login,
        Talk
    },
    data() {
        return {
            displayName: '',
            title: '',
            description: '',
            inputTitle: '',
            inputDescription: '',
            inputSubArea: '',
            selectedSubArea: '全域',
            status: '',
            areaId: '',
            areaName: '',
            prefName: '',
            talks: [],
            talkId: '',
            isOpenModal: false,
            users: '',
            usersNum: 0,
            areaData: [ '北海道', '青森県', '岩手県', '宮城県', '秋田県', '山形県', '福島県', '茨城県', '栃木県', '群馬県', '埼玉県', '千葉県', '東京都', '神奈川県', '新潟県', '富山県', '石川県', '福井県', '山梨県', '長野県', '岐阜県', '静岡県', '愛知県', '三重県', '滋賀県', '京都府', '大阪府', '兵庫県', '奈良県', '和歌山県', '鳥取県', '島根県', '岡山県', '広島県', '山口県', '徳島県', '香川県', '愛媛県', '高知県', '福岡県', '佐賀県', '長崎県', '熊本県', '大分県', '宮崎県', '鹿児島県', '沖縄県' ],
            subAreaData: [],
            subAreas: [],
            targetArea: '全域',
            meta: {
                title: '地域ごとの会議室一覧',
                description: '地域ごとの会議室一覧です。',
                type: 'article',
                url: 'https://hakentalk.com/area/' + this.$route.params.id
            }
        }
    },
    computed: {
        ...mapState(['area']),
        ...mapGetters(['isArea']),
        ...mapState(['user']),
        ...mapGetters(['isLogin']),
    },
    mounted() {
        let now = new Date()
        let limit = new Date(now.setDate(now.getDate() - 7))
        const talksRef = firebase.firestore().collection('talks').where('area', '==', this.$route.params.id).where('createdAt', '>', limit).orderBy('createdAt', 'desc')
        talksRef.onSnapshot(snapshot => {
            this.talks = [];
            snapshot.forEach(doc => {
                let time = ''
                try {
                    time = doc.data().createdAt.toDate()
                }
                catch(e) {
                    console.log(e)
                }
                let usersNum = 0
                if (typeof doc.data().users !== 'undefined' && typeof doc.data().users === 'object' && Object.keys(doc.data().users).length) {
                    usersNum = Object.keys(doc.data().users).length
                } else {
                    usersNum = 1
                }
                this.talks.push({
                    id: doc.id,
                    displayName: doc.data().displayName,
                    photoURL: doc.data().photoURL,
                    title: doc.data().title,
                    description: doc.data().description,
                    users: doc.data().users,
                    createdAt: doc.data().createdAt,
                    subArea: doc.data().subArea
                })
                if ( doc.data().subArea != '全域' ) {
                    this.subAreas.push(doc.data().subArea)
                    this.subAreas = this.subAreas.filter(function (x, i, self) {
                        return self.indexOf(x) === i;
                    })
                }
            })
        })
        this.getSubArea();
    },
    created() {
        this.setArea({
            areaId: this.$route.params.id,
            areaName: this.areaData[this.$route.params.id-1]
        })
        this.prefName = this.areaData[this.$route.params.id-1]
    },
    methods: {
        ...mapActions(['setArea']),
        createTalk() {
            if(this.inputTitle) {
                firebase.firestore().collection('talks').add({
                    authorId: this.$store.state.user.uid,
                    displayName: this.$store.state.user.displayName,
                    photoURL: this.$store.state.user.photoURL,
                    title: this.inputTitle,
                    description: this.inputDescription,
                    createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                    area: this.$route.params.id,
                    subArea: this.selectedSubArea
                })
                .then(result => {
                    firebase.firestore().collection('talks').doc(result.id).update({
                        users: firebase.firestore.FieldValue.arrayUnion({
                            uid: this.$store.state.user.uid,
                            photoURL: this.$store.state.user.photoURL
                        })
                    })
                    this.toggleModal()
                }).catch(err => {
                    console.log(err)
                })
            } else {
                alert('タイトルを入力してください。')
            }
        },
        getSubArea() {
            return axios.get('/json/m_' + this.$route.params.id + '.json')
            .then(res => {
                this.subAreaData = res.data
            })
        },
        printArea(area) {
            this.subAreaData
        },
        setTargetArea(area, event) {
            this.targetArea = area
            let e = document.getElementsByClassName('filter__item')
            for ( let i = 0; i < e.length; i++ ) {
                e[i].className = 'filter__item'
            }
            event.currentTarget.className = 'filter__item isActive'

        },
        isTargetArea(area) {
            if ( this.targetArea == '全域' ) {
                return false
            } else if ( this.targetArea == area ){
                return false
            } else {
                return true
            }
        },
        checkTalkStatus(time) {
            let date = new Date(time)
            let now = new Date()
            let limit = new Date(date.setDate(date.getDate() + 3))
            if(  limit.getTime() > now.getTime() ) {
                this.status = 'OPEN'
                return 'OPEN'
            } else {
                this.status = 'CLOSE'
                return 'CLOSE'
            }
        },
        checkSubArea(area) {
            if ( area == '全域' ) {
                return this.$store.state.area.areaName
            } else {
                return area
            }
        },
        formatDate(time) {
            let date = new Date(time);
            let mon = ('0' + (date.getMonth() + 1)).slice(-2);
            let day = ('0' + date.getDate()).slice(-2);
            let hour = ('0' + date.getHours()).slice(-2);
            let min = ('0' + date.getMinutes()).slice(-2);
            return mon + '/' + day + ' ' + hour + ':' + min;
        },
        toggleModal() {
            this.isOpenModal = !this.isOpenModal
        }
    }
}
</script>

<style lang="scss" scoped>
.container {
    min-height: 50vh;
}

.form {
    overflow-y: scroll;
}

input[type="radio"] {
    display: none;
    &+label {
        display: inline-block;
        border: 1px solid #aaa;
        border-radius: .25rem;
        padding: .25rem .5rem;
        margin: .5rem;
        font-size: .75rem;
        cursor: pointer;
    }
    &:checked {
        &+label {
            background-color: #9191f1;
            border: 1px solid #9191f1;
            color: #fff;
        }
    }
}

.talk {
    &.invisible {
        display: none;
    }
}

.v-enter-active,
.v-leave-active {
    transition: opacity .2s, transform .2s;
}
.v-enter,
.v-leave-to {
    opacity: 0;
    transform: translateY(10px);
}
</style>